name: 'Terraform CD for Infra Repo'

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # 수동 실행 허용

permissions:
  contents: read
  id-token: write   # OIDC 토큰 요청에 필수
  pull-requests: write # PR 코멘트에 plan 결과 작성 시 필요

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    # main 브랜치로의 push가 아니고, develop 브랜치로의 push 또는 PR일 때 실행
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == 'develop')
    runs-on: ubuntu-latest
    environment: develop # 또는 staging (GitHub 환경 설정에 따라)

    env:
      # GCP WIF 설정값 (GitHub Secrets에서 가져오는 것을 강력히 권장)
      GCP_PROJECT_NUMBER: ${{ secrets.GCP_DEV_PROJECT_NUMBER }} # 개발/스테이징 환경 프로젝트 번호
      GCP_WORKLOAD_IDENTITY_POOL_ID: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }} # 동일한 풀 사용 가능
      GCP_WORKLOAD_IDENTITY_PROVIDER_ID: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }} # 동일한 공급자 사용 가능
      # GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_DEV_SERVICE_ACCOUNT_EMAIL }} # 개발/스테이징 환경용 서비스 계정
      # TF_VAR_k3s_token_dev: ${{ secrets.K3S_TOKEN_DEV }} # 개발 환경용 토큰 (필요시)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud (Dev/Staging)'
      id: auth_dev
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
        service_account: '${{ env.GCP_SERVICE_ACCOUNT_EMAIL }}'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init (Dev/Staging)
      run: terraform init
      working-directory: ./dmInfra/environments/dev # 또는 staging 환경 경로

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./dmInfra/environments/dev

    - name: Terraform Plan (Dev/Staging)
      id: plan_dev
      run: |
        terraform plan \
          -var-file="terraform.tfvars" \
          -input=false \
          -no-color \
          -out=tfplan \
          > plan.txt
      working-directory: ./dmInfra/environments/dev
      continue-on-error: true # Plan에 실패해도 다음 단계 (코멘트) 실행

    # PR에 Plan 결과 코멘트 (선택 사항)
    - name: Comment PR with Terraform Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const planOutput = fs.readFileSync('./dmInfra/environments/dev/plan.txt', 'utf8');
          const truncatedPlan = planOutput.substring(0, 65000); // 코멘트 길이 제한 고려
          const output = `#### Terraform Plan for Dev/Staging Environment 📖
          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${truncatedPlan}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Upload Terraform Plan Artifact (Dev/Staging)
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-dev
        path: ./dmInfra/environments/dev/tfplan

    - name: Terraform Plan Exit Code
      run: exit ${{ steps.plan_dev.outcome == 'failure' && 1 || 0 }}


  terraform-apply-prod:
    name: 'Terraform Apply to Production'
    # main 브랜치로의 push일 때만 실행 (PR이 아님)
    if: github.event_name == 'push' && github.ref_name == 'main'
    runs-on: ubuntu-latest
    environment: production # GitHub 환경 설정 사용 (승인자, Secrets 등 관리)
    needs: [terraform-plan] # main 브랜치로의 push 시에도 plan을 먼저 실행하도록 유도하거나, 별도 plan 잡 정의

    env:
      # GCP WIF 설정값 (GitHub Secrets에서 가져오는 것을 강력히 권장)
      GCP_PROJECT_NUMBER: ${{ secrets.GCP_PROD_PROJECT_NUMBER }} # 운영 환경 프로젝트 번호
      GCP_WORKLOAD_IDENTITY_POOL_ID: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }}
      GCP_WORKLOAD_IDENTITY_PROVIDER_ID: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}
      # GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_PROD_SERVICE_ACCOUNT_EMAIL }} # 운영 환경용 서비스 계정
      # TF_VAR_k3s_token_prod: ${{ secrets.K3S_TOKEN_PROD }} # 운영 환경용 토큰
      TF_VAR_k3s_url_prod: ${{ secrets.K3S_PROD_URL }} # terraform.tfvars 대신 Secrets 사용 시
      TF_VAR_k3s_token_prod: ${{ secrets.K3S_PROD_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 'Authenticate to Google Cloud (Production)'
      id: auth_prod
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
        # service_account: '${{ env.GCP_SERVICE_ACCOUNT_EMAIL }}'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init (Production)
      run: terraform init
      working-directory: ./dmInfra/environments/prod

    # 운영 환경 Apply 전 Plan 단계 (필수)
    - name: Terraform Plan (Production)
      run: |
        terraform plan \
          -var-file="terraform.tfvars" \
          -input=false \
          -out=tfplan-prod
      working-directory: ./dmInfra/environments/prod

    # # (강력 권장) 운영 환경 Apply 전 수동 승인 단계
    # - name: Manual Approval for Production Deployment
    #   uses: trstringer/manual-approval@v1
    #   with:
    #     secret: ${{ github.TOKEN }} # 또는 PAT (Personal Access Token)
    #     approvers: 'your-github-username, another-approver' # 승인자 GitHub 유저네임
    #     minimum-approvals: 1 # 최소 승인자 수
    #     issue-title: "PROD Deployment: Terraform Apply Approval Required for main branch"
    #     issue-body: "Review the Terraform plan for production (see run artifacts) and approve/reject."
    #     # notify-users: 'user-to-notify' # 알림 받을 사용자 (선택)

    - name: Terraform Apply (Production)
      run: terraform apply -input=false tfplan-prod
      working-directory: ./dmInfra/environments/prod
